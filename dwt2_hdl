-- -------------------------------------------------------------
-- 
-- File Name: D:\codegen\dwt2_hdl\hdlsrc\dwt2_hdl_fixpt.vhd
-- Created: 2025-05-11 03:36:31
-- 
-- Generated by MATLAB 24.2, MATLAB Coder 24.2 and HDL Coder 24.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dwt2_hdl_fixpt
-- Source Path: dwt2_hdl_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.dwt2_hdl_fixpt_pkg.ALL;

ENTITY dwt2_hdl_fixpt IS
  PORT( img                               :   IN    matrix_of_std_logic_vector14(0 TO 7, 0 TO 7);  -- ufix14_En14 [8x8]
        cA                                :   OUT   matrix_of_std_logic_vector14(0 TO 3, 0 TO 3);  -- ufix14_En14 [4x4]
        cH                                :   OUT   matrix_of_std_logic_vector14(0 TO 3, 0 TO 3);  -- sfix14_En14 [4x4]
        cV                                :   OUT   matrix_of_std_logic_vector14(0 TO 3, 0 TO 3);  -- sfix14_En13 [4x4]
        cD                                :   OUT   matrix_of_std_logic_vector14(0 TO 3, 0 TO 3)  -- sfix14_En15 [4x4]
        );
END dwt2_hdl_fixpt;


ARCHITECTURE rtl OF dwt2_hdl_fixpt IS

  -- Constants
  CONSTANT nc                             : vector_of_signed14(0 TO 8) := 
    (to_signed(16#00DB#, 14), to_signed(-16#008B#, 14), to_signed(-16#0281#, 14), to_signed(16#088A#, 14),
     to_signed(16#134B#, 14), to_signed(16#088A#, 14), to_signed(-16#0281#, 14), to_signed(-16#008B#, 14),
     to_signed(16#00DB#, 14));  -- sfix14 [9]
  CONSTANT nc_0                           : vector_of_signed14(0 TO 8) := 
    (to_signed(16#0175#, 14), to_signed(-16#00EC#, 14), to_signed(-16#0976#, 14), to_signed(16#11D7#, 14),
     to_signed(-16#0976#, 14), to_signed(-16#00EC#, 14), to_signed(16#0175#, 14), to_signed(16#0000#, 14),
     to_signed(16#0000#, 14));  -- sfix14 [9]

  -- Signals
  SIGNAL img_unsigned                     : matrix_of_unsigned14(0 TO 7, 0 TO 7);  -- ufix14_En14 [8x8]
  SIGNAL cA_tmp                           : matrix_of_unsigned14(0 TO 3, 0 TO 3);  -- ufix14_En14 [4x4]
  SIGNAL cH_tmp                           : matrix_of_signed14(0 TO 3, 0 TO 3);  -- sfix14_En14 [4x4]
  SIGNAL cV_tmp                           : matrix_of_signed14(0 TO 3, 0 TO 3);  -- sfix14_En13 [4x4]
  SIGNAL cD_tmp                           : matrix_of_signed14(0 TO 3, 0 TO 3);  -- sfix14_En15 [4x4]

BEGIN
  outputgen8: FOR k IN 0 TO 7 GENERATE
    outputgen9: FOR k1 IN 0 TO 7 GENERATE
      img_unsigned(k, k1) <= unsigned(img(k, k1));
    END GENERATE;
  END GENERATE;

  dwt2_hdl_fixpt_1_output : PROCESS (img_unsigned)
    VARIABLE row_cD : matrix_of_signed14(0 TO 3, 0 TO 7);
    VARIABLE row_cA : matrix_of_unsigned14(0 TO 3, 0 TO 7);
    VARIABLE c_0 : unsigned(3 DOWNTO 0);
    VARIABLE circular_buffer : vector_of_signed14(0 TO 8);
    VARIABLE i_5 : signed(6 DOWNTO 0);
    VARIABLE fmo_4 : vector_of_signed14(0 TO 3);
    VARIABLE fmo_3 : vector_of_signed14(0 TO 3);
    VARIABLE i_6 : unsigned(2 DOWNTO 0);
    VARIABLE circular_buffer_0 : vector_of_signed14(0 TO 8);
    VARIABLE d_temp : signed(13 DOWNTO 0);
    VARIABLE a_temp : signed(13 DOWNTO 0);
    VARIABLE cD1 : matrix_of_signed14(0 TO 3, 0 TO 3);
    VARIABLE cH1 : matrix_of_signed14(0 TO 3, 0 TO 3);
    VARIABLE cV1 : matrix_of_signed14(0 TO 3, 0 TO 3);
    VARIABLE cA1 : matrix_of_unsigned14(0 TO 3, 0 TO 3);
    VARIABLE r_0 : unsigned(2 DOWNTO 0);
    VARIABLE circular_buffer_1 : vector_of_signed14(0 TO 8);
    VARIABLE i_7 : signed(6 DOWNTO 0);
    VARIABLE fmo_6 : vector_of_signed14(0 TO 3);
    VARIABLE fmo_5 : vector_of_signed14(0 TO 3);
    VARIABLE i_8 : unsigned(2 DOWNTO 0);
    VARIABLE circular_buffer_2 : vector_of_signed14(0 TO 8);
    VARIABLE d_temp_0 : signed(13 DOWNTO 0);
    VARIABLE a_temp_0 : signed(13 DOWNTO 0);
    VARIABLE circular_buffer_3 : vector_of_signed14(0 TO 8);
    VARIABLE i_9 : signed(6 DOWNTO 0);
    VARIABLE fmo_8 : vector_of_signed14(0 TO 3);
    VARIABLE fmo_7 : vector_of_signed14(0 TO 3);
    VARIABLE i_10 : unsigned(2 DOWNTO 0);
    VARIABLE circular_buffer_4 : vector_of_signed14(0 TO 8);
    VARIABLE d_temp_1 : signed(13 DOWNTO 0);
    VARIABLE a_temp_1 : signed(13 DOWNTO 0);
    VARIABLE add_temp : vector_of_signed32(0 TO 7);
    VARIABLE add_temp_0 : vector_of_signed32(0 TO 3);
    VARIABLE add_temp_1 : vector_of_signed32(0 TO 7);
    VARIABLE sub_cast : vector_of_signed32(0 TO 7);
    VARIABLE add_temp_2 : vector_of_signed32(0 TO 3);
    VARIABLE add_temp_3 : vector_of_signed32(0 TO 7);
    VARIABLE sub_cast_0 : vector_of_signed32(0 TO 7);
    VARIABLE sub_cast_1 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_2 : vector_of_signed32(0 TO 3);
    VARIABLE sub_temp : vector_of_unsigned7(0 TO 3);
    VARIABLE sub_cast_3 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_4 : vector_of_signed32(0 TO 3);
    VARIABLE add_temp_4 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_5 : vector_of_signed32(0 TO 3);
    VARIABLE sub_temp_0 : vector_of_unsigned7(0 TO 3);
    VARIABLE sub_cast_6 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_7 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast : vector_of_signed29(0 TO 8);
    VARIABLE mul_temp : vector_of_signed28(0 TO 8);
    VARIABLE add_cast_0 : vector_of_signed29(0 TO 8);
    VARIABLE add_temp_5 : vector_of_signed29(0 TO 8);
    VARIABLE add_temp_6 : vector_of_signed32(0 TO 7);
    VARIABLE sub_cast_8 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_1 : vector_of_signed29(0 TO 8);
    VARIABLE mul_temp_0 : vector_of_signed28(0 TO 8);
    VARIABLE add_cast_2 : vector_of_signed29(0 TO 8);
    VARIABLE add_temp_7 : vector_of_signed29(0 TO 8);
    VARIABLE sub_cast_9 : vector_of_signed32(0 TO 7);
    VARIABLE add_temp_8 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_10 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_3 : vector_of_signed29(0 TO 8);
    VARIABLE mul_temp_1 : vector_of_signed28(0 TO 8);
    VARIABLE add_cast_4 : vector_of_signed29(0 TO 8);
    VARIABLE add_temp_9 : vector_of_signed29(0 TO 8);
    VARIABLE sub_cast_11 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_5 : vector_of_signed29(0 TO 8);
    VARIABLE mul_temp_2 : vector_of_signed28(0 TO 8);
    VARIABLE add_cast_6 : vector_of_signed29(0 TO 8);
    VARIABLE add_temp_10 : vector_of_signed29(0 TO 8);
    VARIABLE sub_cast_12 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_13 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_14 : vector_of_signed32(0 TO 3);
    VARIABLE sub_temp_1 : vector_of_unsigned7(0 TO 3);
    VARIABLE sub_cast_15 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_16 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_7 : vector_of_signed29(0 TO 8);
    VARIABLE mul_temp_3 : vector_of_signed28(0 TO 8);
    VARIABLE add_cast_8 : vector_of_signed29(0 TO 8);
    VARIABLE add_temp_11 : vector_of_signed29(0 TO 8);
    VARIABLE sub_cast_17 : vector_of_signed32(0 TO 3);
    VARIABLE add_cast_9 : vector_of_signed29(0 TO 8);
    VARIABLE mul_temp_4 : vector_of_signed28(0 TO 8);
    VARIABLE add_cast_10 : vector_of_signed29(0 TO 8);
    VARIABLE add_temp_12 : vector_of_signed29(0 TO 8);
    VARIABLE sub_cast_18 : vector_of_signed32(0 TO 3);
    VARIABLE sub_cast_19 : vector_of_signed32(0 TO 3);
  BEGIN
    a_temp := to_signed(16#0000#, 14);
    d_temp := to_signed(16#0000#, 14);
    a_temp_0 := to_signed(16#0000#, 14);
    d_temp_0 := to_signed(16#0000#, 14);
    a_temp_1 := to_signed(16#0000#, 14);
    d_temp_1 := to_signed(16#0000#, 14);
    c_0 := to_unsigned(16#0#, 4);
    i_5 := to_signed(16#00#, 7);
    i_6 := to_unsigned(16#0#, 3);
    r_0 := to_unsigned(16#0#, 3);
    i_7 := to_signed(16#00#, 7);
    i_8 := to_unsigned(16#0#, 3);
    i_9 := to_signed(16#00#, 7);
    i_10 := to_unsigned(16#0#, 3);
    -- Compute convolution
    -- Shift buffer
    -- Symmetric extension
    -- Update circular buffer
    -- Process samples in streaming fashion
    -- Initialize buffer with first samples
    -- Use circular buffer for symmetric extension (more HDL-friendly)
    -- Stream-processing version of 1D DWT for HDL
    -- Compute convolution
    -- Shift buffer
    -- Symmetric extension
    -- Update circular buffer
    -- Process samples in streaming fashion
    -- Initialize buffer with first samples
    -- Use circular buffer for symmetric extension (more HDL-friendly)
    -- Stream-processing version of 1D DWT for HDL
    -- Process approximation and detail rows separately
    -- Compute convolution
    -- Shift buffer
    -- Symmetric extension
    -- Update circular buffer
    -- Process samples in streaming fashion
    -- Initialize buffer with first samples
    -- Use circular buffer for symmetric extension (more HDL-friendly)
    -- Stream-processing version of 1D DWT for HDL
    -- Use streaming version of 1D DWT
    -- Process one column (convert to row vector for processing)
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --          Generated by MATLAB 24.2 and Fixed-Point Designer 24.2          %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    -- HDL-compatible 2D DWT using only CDF 9/7 wavelet with streaming interface
    -- Define filter coefficients as constants (not persistent)
    -- Pad to length 9
    -- Get image dimensions
    -- Initialize outputs with fixed sizes (important for HDL)
    -- Process one column at a time to reduce I/O

    FOR t_1 IN 0 TO 7 LOOP
      FOR t_0 IN 0 TO 3 LOOP
        row_cA(t_0, t_1) := to_unsigned(16#0000#, 14);
        row_cD(t_0, t_1) := to_signed(16#0000#, 14);
      END LOOP;
    END LOOP;
    FOR c IN 0 TO 7 LOOP
      add_temp(c) := to_signed(c + 1, 32);
      c_0 := unsigned(add_temp(c)(3 DOWNTO 0));

      FOR t_4 IN 0 TO 8 LOOP
        circular_buffer(t_4) := to_signed(16#0000#, 14);
      END LOOP;
      FOR i IN 0 TO 7 LOOP
        add_temp_1(i) := to_signed(i + 1, 32);
        i_5 := add_temp_1(i)(6 DOWNTO 0);
        sub_cast(i) := signed(resize(c_0, 32));
        circular_buffer(to_integer(resize(i_5, 32) - 1)) := signed(resize(img_unsigned(to_integer(resize(i_5, 32) - 1), to_integer(sub_cast(i) - 1))(13 DOWNTO 1), 14));
      END LOOP;
      FOR t_5 IN 0 TO 3 LOOP
        fmo_3(t_5) := to_signed(16#0000#, 14);
        fmo_4(t_5) := to_signed(16#0000#, 14);
      END LOOP;
      FOR i_0 IN 0 TO 3 LOOP
        add_temp_2(i_0) := to_signed(i_0 + 1, 32);
        i_6 := unsigned(add_temp_2(i_0)(2 DOWNTO 0));

        FOR t_7 IN 0 TO 7 LOOP
          circular_buffer_0(t_7) := circular_buffer(1 + t_7);
        END LOOP;

        sub_temp(i_0) := to_unsigned(16#10#, 7) - resize(resize(resize(to_unsigned(16#2#, 2) * (resize(i_6, 4) - to_unsigned(16#1#, 4)), 7) + to_unsigned(16#09#, 7), 4), 7);
        sub_cast_3(i_0) := signed(resize(sub_temp(i_0), 32));
        sub_cast_4(i_0) := signed(resize(c_0, 32));
        circular_buffer_0(8) := signed(resize(img_unsigned(to_integer(sub_cast_3(i_0) - 1), to_integer(sub_cast_4(i_0) - 1))(13 DOWNTO 1), 14));
        a_temp := to_signed(16#0000#, 14);
        d_temp := to_signed(16#0000#, 14);

        FOR j IN 0 TO 8 LOOP
          add_cast(j) := resize(a_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 29);
          mul_temp(j) := nc(j) * circular_buffer_0(j);
          add_cast_0(j) := resize(mul_temp(j), 29);
          add_temp_5(j) := add_cast(j) + add_cast_0(j);
          a_temp := add_temp_5(j)(26 DOWNTO 13);
          add_cast_1(j) := resize(d_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 29);
          mul_temp_0(j) := nc_0(j) * circular_buffer_0(j);
          add_cast_2(j) := resize(mul_temp_0(j), 29);
          add_temp_7(j) := add_cast_1(j) + add_cast_2(j);
          d_temp := add_temp_7(j)(25 DOWNTO 12);
          circular_buffer(j) := circular_buffer_0(j);
        END LOOP;

        sub_cast_7(i_0) := signed(resize(i_6, 32));
        fmo_3(to_integer(sub_cast_7(i_0) - 1)) := a_temp;
        sub_cast_8(i_0) := signed(resize(i_6, 32));
        fmo_4(to_integer(sub_cast_8(i_0) - 1)) := d_temp;
      END LOOP;
      FOR t_6 IN 0 TO 3 LOOP
        sub_cast_1(t_6) := signed(resize(c_0, 32));
        row_cA(t_6, to_integer(sub_cast_1(t_6) - 1)) := unsigned(fmo_3(t_6)(12 DOWNTO 0) & '0');
        sub_cast_2(t_6) := signed(resize(c_0, 32));
        row_cD(t_6, to_integer(sub_cast_2(t_6) - 1)) := fmo_4(t_6)(12 DOWNTO 0) & '0';
      END LOOP;

    END LOOP;

    -- Process one row at a time to reduce I/O

    FOR t_3 IN 0 TO 3 LOOP
      FOR t_2 IN 0 TO 3 LOOP
        cA1(t_2, t_3) := to_unsigned(16#0000#, 14);
        cV1(t_2, t_3) := to_signed(16#0000#, 14);
        cH1(t_2, t_3) := to_signed(16#0000#, 14);
        cD1(t_2, t_3) := to_signed(16#0000#, 14);
      END LOOP;
    END LOOP;
    FOR r IN 0 TO 3 LOOP
      add_temp_0(r) := to_signed(r + 1, 32);
      r_0 := unsigned(add_temp_0(r)(2 DOWNTO 0));

      FOR t_10 IN 0 TO 8 LOOP
        circular_buffer_1(t_10) := to_signed(16#0000#, 14);
      END LOOP;
      FOR i_1 IN 0 TO 7 LOOP
        add_temp_3(i_1) := to_signed(i_1 + 1, 32);
        i_7 := add_temp_3(i_1)(6 DOWNTO 0);
        sub_cast_0(i_1) := signed(resize(r_0, 32));
        circular_buffer_1(to_integer(resize(i_7, 32) - 1)) := signed(resize(row_cA(to_integer(sub_cast_0(i_1) - 1), to_integer(resize(i_7, 32) - 1))(13 DOWNTO 1), 14));
      END LOOP;
      FOR t_11 IN 0 TO 3 LOOP
        fmo_5(t_11) := to_signed(16#0000#, 14);
        fmo_6(t_11) := to_signed(16#0000#, 14);
      END LOOP;
      FOR i_2 IN 0 TO 3 LOOP
        add_temp_4(i_2) := to_signed(i_2 + 1, 32);
        i_8 := unsigned(add_temp_4(i_2)(2 DOWNTO 0));

        FOR t_13 IN 0 TO 7 LOOP
          circular_buffer_2(t_13) := circular_buffer_1(1 + t_13);
        END LOOP;

        sub_cast_5(i_2) := signed(resize(r_0, 32));
        sub_temp_0(i_2) := to_unsigned(16#10#, 7) - resize(resize(resize(to_unsigned(16#2#, 2) * (resize(i_8, 4) - to_unsigned(16#1#, 4)), 7) + to_unsigned(16#09#, 7), 4), 7);
        sub_cast_6(i_2) := signed(resize(sub_temp_0(i_2), 32));
        circular_buffer_2(8) := signed(resize(row_cA(to_integer(sub_cast_5(i_2) - 1), to_integer(sub_cast_6(i_2) - 1))(13 DOWNTO 1), 14));
        a_temp_0 := to_signed(16#0000#, 14);
        d_temp_0 := to_signed(16#0000#, 14);

        FOR j_0 IN 0 TO 8 LOOP
          add_cast_3(j_0) := resize(a_temp_0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 29);
          mul_temp_1(j_0) := nc(j_0) * circular_buffer_2(j_0);
          add_cast_4(j_0) := resize(mul_temp_1(j_0), 29);
          add_temp_9(j_0) := add_cast_3(j_0) + add_cast_4(j_0);
          a_temp_0 := add_temp_9(j_0)(26 DOWNTO 13);
          add_cast_5(j_0) := resize(d_temp_0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 29);
          mul_temp_2(j_0) := nc_0(j_0) * circular_buffer_2(j_0);
          add_cast_6(j_0) := resize(mul_temp_2(j_0), 29);
          add_temp_10(j_0) := add_cast_5(j_0) + add_cast_6(j_0);
          d_temp_0 := add_temp_10(j_0)(25 DOWNTO 12);
          circular_buffer_1(j_0) := circular_buffer_2(j_0);
        END LOOP;

        sub_cast_10(i_2) := signed(resize(i_8, 32));
        fmo_5(to_integer(sub_cast_10(i_2) - 1)) := a_temp_0;
        sub_cast_11(i_2) := signed(resize(i_8, 32));
        fmo_6(to_integer(sub_cast_11(i_2) - 1)) := d_temp_0;
      END LOOP;
      FOR t_12 IN 0 TO 8 LOOP
        circular_buffer_3(t_12) := to_signed(16#0000#, 14);
      END LOOP;
      FOR i_3 IN 0 TO 7 LOOP
        add_temp_6(i_3) := to_signed(i_3 + 1, 32);
        i_9 := add_temp_6(i_3)(6 DOWNTO 0);
        sub_cast_9(i_3) := signed(resize(r_0, 32));
        circular_buffer_3(to_integer(resize(i_9, 32) - 1)) := resize(row_cD(to_integer(sub_cast_9(i_3) - 1), to_integer(resize(i_9, 32) - 1))(13 DOWNTO 1), 14);
      END LOOP;
      FOR t_14 IN 0 TO 3 LOOP
        fmo_7(t_14) := to_signed(16#0000#, 14);
        fmo_8(t_14) := to_signed(16#0000#, 14);
      END LOOP;
      FOR i_4 IN 0 TO 3 LOOP
        add_temp_8(i_4) := to_signed(i_4 + 1, 32);
        i_10 := unsigned(add_temp_8(i_4)(2 DOWNTO 0));

        FOR t_15 IN 0 TO 7 LOOP
          circular_buffer_4(t_15) := circular_buffer_3(1 + t_15);
        END LOOP;

        sub_cast_14(i_4) := signed(resize(r_0, 32));
        sub_temp_1(i_4) := to_unsigned(16#10#, 7) - resize(resize(resize(to_unsigned(16#2#, 2) * (resize(i_10, 4) - to_unsigned(16#1#, 4)), 7) + to_unsigned(16#09#, 7), 4), 7);
        sub_cast_15(i_4) := signed(resize(sub_temp_1(i_4), 32));
        circular_buffer_4(8) := resize(row_cD(to_integer(sub_cast_14(i_4) - 1), to_integer(sub_cast_15(i_4) - 1))(13 DOWNTO 1), 14);
        a_temp_1 := to_signed(16#0000#, 14);
        d_temp_1 := to_signed(16#0000#, 14);

        FOR j_1 IN 0 TO 8 LOOP
          add_cast_7(j_1) := resize(a_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 29);
          mul_temp_3(j_1) := nc(j_1) * circular_buffer_4(j_1);
          add_cast_8(j_1) := resize(mul_temp_3(j_1), 29);
          add_temp_11(j_1) := add_cast_7(j_1) + add_cast_8(j_1);
          a_temp_1 := add_temp_11(j_1)(26 DOWNTO 13);
          add_cast_9(j_1) := resize(d_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 29);
          mul_temp_4(j_1) := nc_0(j_1) * circular_buffer_4(j_1);
          add_cast_10(j_1) := resize(mul_temp_4(j_1), 29);
          add_temp_12(j_1) := add_cast_9(j_1) + add_cast_10(j_1);
          d_temp_1 := add_temp_12(j_1)(25 DOWNTO 12);
          circular_buffer_3(j_1) := circular_buffer_4(j_1);
        END LOOP;

        sub_cast_16(i_4) := signed(resize(i_10, 32));
        fmo_7(to_integer(sub_cast_16(i_4) - 1)) := a_temp_1;
        sub_cast_17(i_4) := signed(resize(i_10, 32));
        fmo_8(to_integer(sub_cast_17(i_4) - 1)) := d_temp_1;
        sub_cast_18(i_4) := signed(resize(r_0, 32));
        cA1(to_integer(sub_cast_18(i_4) - 1), i_4) := unsigned(fmo_5(i_4)(12 DOWNTO 0) & '0');
        sub_cast_19(i_4) := signed(resize(r_0, 32));
        cV1(to_integer(sub_cast_19(i_4) - 1), i_4) := fmo_6(i_4);
      END LOOP;
      FOR t_16 IN 0 TO 3 LOOP
        sub_cast_12(t_16) := signed(resize(r_0, 32));
        cH1(to_integer(sub_cast_12(t_16) - 1), t_16) := fmo_7(t_16)(12 DOWNTO 0) & '0';
        sub_cast_13(t_16) := signed(resize(r_0, 32));
        cD1(to_integer(sub_cast_13(t_16) - 1), t_16) := fmo_8(t_16)(11 DOWNTO 0) & '0' & '0';
      END LOOP;

    END LOOP;
    FOR t_9 IN 0 TO 3 LOOP
      FOR t_8 IN 0 TO 3 LOOP
        cA_tmp(t_8, t_9) <= cA1(t_8, t_9);
        cH_tmp(t_8, t_9) <= cH1(t_8, t_9);
        cV_tmp(t_8, t_9) <= cV1(t_8, t_9);
        cD_tmp(t_8, t_9) <= cD1(t_8, t_9);
      END LOOP;
    END LOOP;

  END PROCESS dwt2_hdl_fixpt_1_output;


  outputgen6: FOR k IN 0 TO 3 GENERATE
    outputgen7: FOR k1 IN 0 TO 3 GENERATE
      cA(k, k1) <= std_logic_vector(cA_tmp(k, k1));
    END GENERATE;
  END GENERATE;

  outputgen4: FOR k IN 0 TO 3 GENERATE
    outputgen5: FOR k1 IN 0 TO 3 GENERATE
      cH(k, k1) <= std_logic_vector(cH_tmp(k, k1));
    END GENERATE;
  END GENERATE;

  outputgen2: FOR k IN 0 TO 3 GENERATE
    outputgen3: FOR k1 IN 0 TO 3 GENERATE
      cV(k, k1) <= std_logic_vector(cV_tmp(k, k1));
    END GENERATE;
  END GENERATE;

  outputgen: FOR k IN 0 TO 3 GENERATE
    outputgen1: FOR k1 IN 0 TO 3 GENERATE
      cD(k, k1) <= std_logic_vector(cD_tmp(k, k1));
    END GENERATE;
  END GENERATE;

END rtl;


